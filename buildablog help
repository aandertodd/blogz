app.route('/newpost', methods=['GET', 'POST'])
def new_post():
    #some stuff

    #make a post, save to database

    #get the id for the POST

    return redirect('/post?id=' + id)


app.route('/post')
def single_post():
    # get id out of request
    # get post with above id out of the database
    # give post to template, render


request.args.get('id') and set equal to a variable to query database of id's

hidden item?

<form method='POST' action='/delete-task' style="display: inline-block;">
    <input type="hidden" name="task-id" value="{{task.id}}" />
    <input type="submit" text="Done!" />  << how to make hidden element >>

* any time you change or create columns in the class you have to drop all and create all to
 see changes happen.

 # flashed messages requires importing flash and incorporating code in the html portion

 {% with messages = get_flashed_messages() %}
     <ul>
         {% for message in messages %}
         <li>{{message}}</li>
         {% endfor %}
     </ul>

 {% endwith %}

 to use categories with flashed messages...

 {% with messages = get_flashed_messages(with_categories=True) %}
     <ul>
         {% for category,message in messages %}
         <li class='{{category}}'>{{message}}</li> << the class here of category would allow
                                                    us to use a .erro class in a style tag to use css. :)
         {% endfor %}
     </ul>

 {% endwith %}

 and add the category in the spot where message is flashed in python...

 flash('That don\'t work like dat, mang.', 'error') < here the error is the category and we can
                                                        make up whatever we want to call it.
